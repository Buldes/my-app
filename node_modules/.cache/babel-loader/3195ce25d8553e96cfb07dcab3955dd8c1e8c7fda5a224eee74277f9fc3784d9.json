{"ast":null,"code":"import { exampleData } from \"../../Data/list\";\nexport var yearMonthData = [];\nexport function DataSorting() {\n  const dataCopie = exampleData;\n  const oneYearData = [];\n  yearMonthData = {\n    1: [],\n    2: [],\n    3: [],\n    4: [],\n    5: [],\n    6: [],\n    7: [],\n    8: [],\n    9: [],\n    10: [],\n    11: [],\n    12: [],\n    current: []\n  };\n\n  // Kopie neu anordnen\n  dataCopie.sort(function (a, b) {\n    if (a.date.year < b.date.year) return 1;\n    if (a.date.year > b.date.year) return -1;\n    if (a.date.month < b.date.month) return 1;\n    if (a.date.month > b.date.month) return -1;\n    if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n    if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n    return 0;\n  });\n\n  //Alle daten, die maximal 1 Jahhr her sind speichern\n  for (let i = 0; i < dataCopie.length; i++) {\n    if (parseInt(dataCopie[i].date.year) < parseInt(new Date().getFullYear())) {\n      if (parseInt(dataCopie[i].date.month) <= parseInt(new Date().getMonth())) {\n        break;\n      }\n    }\n    oneYearData.push(exampleData[i]);\n  }\n\n  //Gespeicherte Daten zu dazugehörigem Monat sortieren\n  oneYearData.forEach(item => {\n    if (parseInt(item.date.year) === new Date().getFullYear()) {\n      if (parseInt(item.date.month) === new Date().getMonth() + 1) yearMonthData.current.push(item);else yearMonthData[item.date.month].push(item);\n    } else yearMonthData[item.date.month].push(item);\n  });\n}\n_c = DataSorting;\nvar _c;\n$RefreshReg$(_c, \"DataSorting\");","map":{"version":3,"names":["exampleData","yearMonthData","DataSorting","dataCopie","oneYearData","current","sort","a","b","date","year","month","parseInt","day","i","length","Date","getFullYear","getMonth","push","forEach","item","_c","$RefreshReg$"],"sources":["/home/shs/my-app/src/Functions/Analyse/onYearDataSorting.js"],"sourcesContent":["import { exampleData } from \"../../Data/list\"\n\nexport var yearMonthData = []\n\nexport function DataSorting(){\n\n    const dataCopie = exampleData\n    const oneYearData = []\n    yearMonthData = {1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[], 8:[], 9:[], 10:[], 11:[], 12:[], current:[]}\n\n    // Kopie neu anordnen\n    dataCopie.sort(function(a, b) {\n        if (a.date.year < b.date.year) return 1;\n        if (a.date.year > b.date.year) return -1;\n        if (a.date.month < b.date.month) return 1;\n        if (a.date.month > b.date.month) return -1;\n        if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n        if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n        return 0;\n      })\n\n    //Alle daten, die maximal 1 Jahhr her sind speichern\n    for (let i = 0; i < dataCopie.length; i++) {\n        if (parseInt(dataCopie[i].date.year) < parseInt(new Date().getFullYear())){\n            if (parseInt(dataCopie[i].date.month) <= parseInt(new Date().getMonth())) {\n                break\n            }}\n\n        oneYearData.push(exampleData[i])\n    }\n    \n    //Gespeicherte Daten zu dazugehörigem Monat sortieren\n    oneYearData.forEach((item) => {\n        if (parseInt(item.date.year) === new Date().getFullYear()){\n            if (parseInt(item.date.month) === new Date().getMonth() + 1) yearMonthData.current.push(item)\n            else yearMonthData[item.date.month].push(item)}\n        else yearMonthData[item.date.month].push(item)\n    })\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}