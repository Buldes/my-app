{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kevin\\\\Desktop\\\\Website\\\\my-app\\\\src\\\\Functions\\\\generateListItem.js\";\nimport React from \"react\";\nimport { CostIncommListItem } from \"../Components/costIncomListItem\";\nimport { exampleData } from \"../Data/list\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GenerateCostIncomList() {\n  let listItem = [];\n  for (let i = 0; i < exampleData.length; i++) {\n    listItem.push( /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(CostIncommListItem, {\n        state: exampleData[i].state,\n        date: exampleData[i].date.day + \".\" + exampleData[i].date.month + \".\" + exampleData[i].date.year,\n        amount: exampleData[i].amount,\n        id: exampleData[i].id,\n        x: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 52\n      }, this)]\n    }, exampleData[i].id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 23\n    }, this));\n  }\n  return listItem;\n}\n\n//Hier: (Funktion bereits getestet und erfolgreich eingebaut.) die entstandende liste von exampledata abhängig machen\n//In App.js: alle funktionen ein script geben\n_c = GenerateCostIncomList;\nvar _c;\n$RefreshReg$(_c, \"GenerateCostIncomList\");","map":{"version":3,"names":["React","CostIncommListItem","exampleData","jsxDEV","_jsxDEV","GenerateCostIncomList","listItem","i","length","push","children","state","date","day","month","year","amount","id","x","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Kevin/Desktop/Website/my-app/src/Functions/generateListItem.js"],"sourcesContent":["import React from \"react\";\r\nimport { CostIncommListItem } from \"../Components/costIncomListItem\";\r\nimport { exampleData } from \"../Data/list\";\r\n\r\nexport function GenerateCostIncomList(){\r\n    let listItem = []\r\n\r\n    for (let i = 0; i < exampleData.length; i++){\r\n        listItem.push(<li key={exampleData[i].id}> <CostIncommListItem state={exampleData[i].state} \r\n                                          date={exampleData[i].date.day + \".\" + exampleData[i].date.month + \".\" + exampleData[i].date.year}\r\n                                          amount={exampleData[i].amount} id={exampleData[i].id} x={5}/></li>)\r\n    }\r\n    return (listItem)\r\n}\r\n\r\n\r\n//Hier: (Funktion bereits getestet und erfolgreich eingebaut.) die entstandende liste von exampledata abhängig machen\r\n//In App.js: alle funktionen ein script geben"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,QAAQ,iCAAiC;AACpE,SAASC,WAAW,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,OAAO,SAASC,qBAAqBA,CAAA,EAAE;EACnC,IAAIC,QAAQ,GAAG,EAAE;EAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,WAAW,CAACM,MAAM,EAAED,CAAC,EAAE,EAAC;IACxCD,QAAQ,CAACG,IAAI,eAACL,OAAA;MAAAM,QAAA,GAA4B,GAAC,eAAAN,OAAA,CAACH,kBAAkB;QAACU,KAAK,EAAET,WAAW,CAACK,CAAC,CAAC,CAACI,KAAM;QACzDC,IAAI,EAAEV,WAAW,CAACK,CAAC,CAAC,CAACK,IAAI,CAACC,GAAG,GAAG,GAAG,GAAGX,WAAW,CAACK,CAAC,CAAC,CAACK,IAAI,CAACE,KAAK,GAAG,GAAG,GAAGZ,WAAW,CAACK,CAAC,CAAC,CAACK,IAAI,CAACG,IAAK;QACjGC,MAAM,EAAEd,WAAW,CAACK,CAAC,CAAC,CAACS,MAAO;QAACC,EAAE,EAAEf,WAAW,CAACK,CAAC,CAAC,CAACU,EAAG;QAACC,CAAC,EAAE;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE;IAAA,GAFxEpB,WAAW,CAACK,CAAC,CAAC,CAACU,EAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAE4D,CAAC;EACzG;EACA,OAAQhB,QAAQ;AACpB;;AAGA;AACA;AAAAiB,EAAA,GAbgBlB,qBAAqB;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}