{"ast":null,"code":"import { exampleData } from \"../../Data/list\";\nimport { monthAvarge, monthCost } from \"../../Data/float\";\nexport function CalculateMonthAvarge() {\n  const dataCopie = exampleData;\n  const oneYearData = [];\n  const monthData = {\n    1: [],\n    2: [],\n    3: [],\n    4: [],\n    5: [],\n    6: [],\n    7: [],\n    8: [],\n    9: [],\n    10: [],\n    11: [],\n    12: [],\n    current: []\n  };\n\n  // Kopie neu anordnen\n  dataCopie.sort(function (a, b) {\n    if (a.date.year < b.date.year) return 1;\n    if (a.date.year > b.date.year) return -1;\n    if (a.date.month < b.date.month) return 1;\n    if (a.date.month > b.date.month) return -1;\n    if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n    if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n    return 0;\n  });\n  console.log(dataCopie[0]);\n\n  //Alle daten, die maximal 1 Jahhr her sind speichern\n  for (let i = 0; i < dataCopie.length; i++) {\n    if (parseInt(dataCopie[i].date.year) < parseInt(new Date().getFullYear())) {\n      if (parseInt(dataCopie[i].date.month) <= parseInt(new Date().getMonth())) {\n        console.log(dataCopie[i].date);\n        break;\n      }\n    }\n    oneYearData.push(exampleData[i]);\n  }\n\n  //Gespeicherte Daten zu dazugehörigem Monat sortieren\n  oneYearData.forEach(item => {\n    if (parseInt(item.date.year) === new Date().getFullYear()) {\n      if (parseInt(item.date.month) === new Date().getMonth() + 1) monthData.current.push(item);else monthData[item.date.month].push(item);\n    } else monthData[item.date.month].push(item);\n  });\n  console.log(monthData);\n  console.log(oneYearData);\n  console.log(\"Finish\");\n}\n_c = CalculateMonthAvarge;\nvar _c;\n$RefreshReg$(_c, \"CalculateMonthAvarge\");","map":{"version":3,"names":["exampleData","monthAvarge","monthCost","CalculateMonthAvarge","dataCopie","oneYearData","monthData","current","sort","a","b","date","year","month","parseInt","day","console","log","i","length","Date","getFullYear","getMonth","push","forEach","item","_c","$RefreshReg$"],"sources":["/home/shs/my-app/src/Functions/Analyse/calculateMonth.js"],"sourcesContent":["import { exampleData } from \"../../Data/list\";\nimport { monthAvarge, monthCost } from \"../../Data/float\";\n\nexport function CalculateMonthAvarge(){\n\n    const dataCopie = exampleData\n    const oneYearData = []\n    const monthData = {1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[], 8:[], 9:[], 10:[], 11:[], 12:[], current:[]}\n\n    // Kopie neu anordnen\n    dataCopie.sort(function(a, b) {\n        if (a.date.year < b.date.year) return 1;\n        if (a.date.year > b.date.year) return -1;\n        if (a.date.month < b.date.month) return 1;\n        if (a.date.month > b.date.month) return -1;\n        if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n        if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n        return 0;\n      })\n      console.log(dataCopie[0])\n\n    //Alle daten, die maximal 1 Jahhr her sind speichern\n    for (let i = 0; i < dataCopie.length; i++) {\n        if (parseInt(dataCopie[i].date.year) < parseInt(new Date().getFullYear())){\n            if (parseInt(dataCopie[i].date.month) <= parseInt(new Date().getMonth())) {\n                console.log(dataCopie[i].date)\n                break\n            }}\n\n        oneYearData.push(exampleData[i])\n    }\n    \n    //Gespeicherte Daten zu dazugehörigem Monat sortieren\n    oneYearData.forEach((item) => {\n        if (parseInt(item.date.year) === new Date().getFullYear()){\n            if (parseInt(item.date.month) === new Date().getMonth() + 1) monthData.current.push(item)\n            else monthData[item.date.month].push(item)}\n        else monthData[item.date.month].push(item)\n    })\n\n    console.log(monthData)\n    console.log(oneYearData)\n    console.log(\"Finish\")\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}