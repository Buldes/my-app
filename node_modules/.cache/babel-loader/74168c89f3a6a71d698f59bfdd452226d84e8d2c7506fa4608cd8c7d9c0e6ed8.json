{"ast":null,"code":"import { exampleData } from \"../../Data/list\";\nimport { monthAvarge, monthCost } from \"../../Data/float\";\nexport function CalculateMonthAvarge() {\n  const dataCopie = exampleData;\n  const oneYearData = [];\n  const monthData = {\n    1: [],\n    2: [],\n    3: [],\n    4: [],\n    5: [],\n    6: [],\n    7: [],\n    8: [],\n    9: [],\n    10: [],\n    11: [],\n    12: [],\n    current: []\n  };\n\n  // Kopie neu anordnen\n  dataCopie.sort(function (a, b) {\n    if (a.date.year < b.date.year) return 1;\n    if (a.date.year > b.date.year) return -1;\n    if (a.date.month < b.date.month) return 1;\n    if (a.date.month > b.date.month) return -1;\n    if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n    if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n    return 0;\n  });\n\n  //Alle daten, die maximal 1 Jahhr her sind speichern\n  for (let i = 0; i < dataCopie.length; i++) {\n    if (parseInt(exampleData[i].date.year) < parseInt(new Date().getFullYear()) && parseInt(exampleData[i].date.month) <= parseInt(new Date().getMonth() + 1)) break;\n    oneYearData.push(exampleData[i]);\n  }\n\n  //Gespeicherte Daten zu dazugehörige Monate sortieren\n  oneYearData.forEach(item => {\n    if (item.date.year === new Date().getFullYear() && item.date.month === new Date().getMonth()) monthData[current].push(item);else monthData[item.date.month].push(item);\n  });\n  for (let i = 0; i < 12; i++) {\n    console.log(monthData[i]);\n  }\n  console.log(monthData);\n  console.log(\"Finish\");\n}\n_c = CalculateMonthAvarge;\nvar _c;\n$RefreshReg$(_c, \"CalculateMonthAvarge\");","map":{"version":3,"names":["exampleData","monthAvarge","monthCost","CalculateMonthAvarge","dataCopie","oneYearData","monthData","current","sort","a","b","date","year","month","parseInt","day","i","length","Date","getFullYear","getMonth","push","forEach","item","console","log","_c","$RefreshReg$"],"sources":["/home/shs/my-app/src/Functions/Analyse/calculateMonth.js"],"sourcesContent":["import { exampleData } from \"../../Data/list\";\nimport { monthAvarge, monthCost } from \"../../Data/float\";\n\nexport function CalculateMonthAvarge(){\n\n    const dataCopie = exampleData\n    const oneYearData = []\n    const monthData = {1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[], 8:[], 9:[], 10:[], 11:[], 12:[], current:[]}\n\n    // Kopie neu anordnen\n    dataCopie.sort(function(a, b) {\n        if (a.date.year < b.date.year) return 1;\n        if (a.date.year > b.date.year) return -1;\n        if (a.date.month < b.date.month) return 1;\n        if (a.date.month > b.date.month) return -1;\n        if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n        if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n        return 0;\n      })\n\n    //Alle daten, die maximal 1 Jahhr her sind speichern\n    for (let i = 0; i < dataCopie.length; i++) {\n\n        if (parseInt(exampleData[i].date.year) < parseInt(new Date().getFullYear()) &&\n            parseInt(exampleData[i].date.month) <= parseInt(new Date().getMonth() + 1)) break\n\n        oneYearData.push(exampleData[i])\n    }\n    \n    //Gespeicherte Daten zu dazugehörige Monate sortieren\n    oneYearData.forEach((item) => {\n        if (item.date.year === new Date().getFullYear() && item.date.month === new Date().getMonth()) monthData[current].push(item)\n        else monthData[item.date.month].push(item)\n    })\n\n    for (let i = 0; i < 12; i++){\n        console.log(monthData[i])\n    }\n    console.log(monthData)\n    console.log(\"Finish\")\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}