{"ast":null,"code":"import { exampleData } from \"../../Data/list\";\nimport { monthAvarge, monthCost } from \"../../Data/float\";\nexport function CalculateMonthAvarge() {\n  const dataCopie = exampleData;\n  dataCopie.sort(function (a, b) {\n    // Vergleiche Jahr\n    if (a.date.year < b.date.year) return 1;\n    if (a.date.year > b.date.year) return -1;\n    if (a.date.month < b.date.month) return 1;\n    if (a.date.month > b.date.month) return -1;\n    if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n    if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n    return 0;\n  });\n  for (let i = 0; i < dataCopie.length; i++) {\n    if (parseInt(exampleData[i].date.year) < parseInt(new Date().getFullYear()) && parseInt(exampleData[i].date.month) <= parseInt(new Date().getMonth() + 1)) {\n      console.log(\"Daten von vor einem Jahr gefunden. ID:\" + exampleData[i].id + \", Datum:\" + exampleData[i].date.day + \".\" + exampleData[i].date.month + \".\" + exampleData[i].date.year + \", Status:\" + exampleData[i].state + \", Heute:\" + new Date().getDate());\n      break;\n    }\n    console.log(\"OK\");\n  }\n}\n_c = CalculateMonthAvarge;\nvar _c;\n$RefreshReg$(_c, \"CalculateMonthAvarge\");","map":{"version":3,"names":["exampleData","monthAvarge","monthCost","CalculateMonthAvarge","dataCopie","sort","a","b","date","year","month","parseInt","day","i","length","Date","getFullYear","getMonth","console","log","id","state","getDate","_c","$RefreshReg$"],"sources":["/home/shs/my-app/src/Functions/Analyse/calculateMonth.js"],"sourcesContent":["import { exampleData } from \"../../Data/list\";\nimport { monthAvarge, monthCost } from \"../../Data/float\";\n\nexport function CalculateMonthAvarge(){\n\n    const dataCopie = exampleData\n\n    dataCopie.sort(function(a, b) {\n        // Vergleiche Jahr\n        if (a.date.year < b.date.year) return 1;\n        if (a.date.year > b.date.year) return -1;\n        if (a.date.month < b.date.month) return 1;\n        if (a.date.month > b.date.month) return -1;\n        if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n        if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n        return 0;\n      })\n\n    for (let i = 0; i < dataCopie.length; i++) {\n\n        if (parseInt(exampleData[i].date.year) < parseInt(new Date().getFullYear()) &&\n            parseInt(exampleData[i].date.month) <= parseInt(new Date().getMonth() + 1)){\n\n            console.log(\"Daten von vor einem Jahr gefunden. ID:\" + exampleData[i].id + \", Datum:\" + exampleData[i].date.day + \".\" + exampleData[i].date.month + \".\" + exampleData[i].date.year + \", Status:\" + exampleData[i].state + \", Heute:\" + new Date().getDate())\n            break\n        }\n\n        console.log(\"OK\")\n    }\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AAEzD,OAAO,SAASC,oBAAoBA,CAAA,EAAE;EAElC,MAAMC,SAAS,GAAGJ,WAAW;EAE7BI,SAAS,CAACC,IAAI,CAAC,UAASC,CAAC,EAAEC,CAAC,EAAE;IAC1B;IACA,IAAID,CAAC,CAACE,IAAI,CAACC,IAAI,GAAGF,CAAC,CAACC,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC;IACvC,IAAIH,CAAC,CAACE,IAAI,CAACC,IAAI,GAAGF,CAAC,CAACC,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,IAAIH,CAAC,CAACE,IAAI,CAACE,KAAK,GAAGH,CAAC,CAACC,IAAI,CAACE,KAAK,EAAE,OAAO,CAAC;IACzC,IAAIJ,CAAC,CAACE,IAAI,CAACE,KAAK,GAAGH,CAAC,CAACC,IAAI,CAACE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1C,IAAIC,QAAQ,CAACL,CAAC,CAACE,IAAI,CAACI,GAAG,CAAC,GAAGD,QAAQ,CAACJ,CAAC,CAACC,IAAI,CAACI,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;IAC1D,IAAID,QAAQ,CAACL,CAAC,CAACE,IAAI,CAACI,GAAG,CAAC,GAAGD,QAAQ,CAACJ,CAAC,CAACC,IAAI,CAACI,GAAG,CAAC,EAAE,OAAO,CAAC;IACzD,OAAO,CAAC;EACV,CAAC,CAAC;EAEJ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,SAAS,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IAEvC,IAAIF,QAAQ,CAACX,WAAW,CAACa,CAAC,CAAC,CAACL,IAAI,CAACC,IAAI,CAAC,GAAGE,QAAQ,CAAC,IAAII,IAAI,EAAE,CAACC,WAAW,EAAE,CAAC,IACvEL,QAAQ,CAACX,WAAW,CAACa,CAAC,CAAC,CAACL,IAAI,CAACE,KAAK,CAAC,IAAIC,QAAQ,CAAC,IAAII,IAAI,EAAE,CAACE,QAAQ,EAAE,GAAG,CAAC,CAAC,EAAC;MAE3EC,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAGnB,WAAW,CAACa,CAAC,CAAC,CAACO,EAAE,GAAG,UAAU,GAAGpB,WAAW,CAACa,CAAC,CAAC,CAACL,IAAI,CAACI,GAAG,GAAG,GAAG,GAAGZ,WAAW,CAACa,CAAC,CAAC,CAACL,IAAI,CAACE,KAAK,GAAG,GAAG,GAAGV,WAAW,CAACa,CAAC,CAAC,CAACL,IAAI,CAACC,IAAI,GAAG,WAAW,GAAGT,WAAW,CAACa,CAAC,CAAC,CAACQ,KAAK,GAAG,UAAU,GAAG,IAAIN,IAAI,EAAE,CAACO,OAAO,EAAE,CAAC;MAC5P;IACJ;IAEAJ,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;EACrB;AACJ;AAACI,EAAA,GA1BepB,oBAAoB;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}