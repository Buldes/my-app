{"ast":null,"code":"import { exampleData } from \"../../Data/list\";\nimport { monthAvarge, monthCost } from \"../../Data/float\";\nexport function CalculateMonthAvarge() {\n  const dataCopie = exampleData;\n  const oneYearData = [];\n  dataCopie.sort(function (a, b) {\n    // Vergleiche Jahr\n    if (a.date.year < b.date.year) return 1;\n    if (a.date.year > b.date.year) return -1;\n    if (a.date.month < b.date.month) return 1;\n    if (a.date.month > b.date.month) return -1;\n    if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n    if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n    return 0;\n  });\n  for (let i = 0; i < dataCopie.length; i++) {\n    if (parseInt(exampleData[i].date.year) < parseInt(new Date().getFullYear()) && parseInt(exampleData[i].date.month) <= parseInt(new Date().getMonth() + 1)) break;\n    oneYearData.push(exampleData[i]);\n  }\n  console.log(oneYearData.length);\n}\n_c = CalculateMonthAvarge;\nvar _c;\n$RefreshReg$(_c, \"CalculateMonthAvarge\");","map":{"version":3,"names":["exampleData","monthAvarge","monthCost","CalculateMonthAvarge","dataCopie","oneYearData","sort","a","b","date","year","month","parseInt","day","i","length","Date","getFullYear","getMonth","push","console","log","_c","$RefreshReg$"],"sources":["/home/shs/my-app/src/Functions/Analyse/calculateMonth.js"],"sourcesContent":["import { exampleData } from \"../../Data/list\";\nimport { monthAvarge, monthCost } from \"../../Data/float\";\n\nexport function CalculateMonthAvarge(){\n\n    const dataCopie = exampleData\n    const oneYearData = []\n\n    dataCopie.sort(function(a, b) {\n        // Vergleiche Jahr\n        if (a.date.year < b.date.year) return 1;\n        if (a.date.year > b.date.year) return -1;\n        if (a.date.month < b.date.month) return 1;\n        if (a.date.month > b.date.month) return -1;\n        if (parseInt(a.date.day) < parseInt(b.date.day)) return -1;\n        if (parseInt(a.date.day) > parseInt(b.date.day)) return 1;\n        return 0;\n      })\n\n    for (let i = 0; i < dataCopie.length; i++) {\n\n        if (parseInt(exampleData[i].date.year) < parseInt(new Date().getFullYear()) &&\n            parseInt(exampleData[i].date.month) <= parseInt(new Date().getMonth() + 1)) break\n\n        oneYearData.push(exampleData[i])\n    }\n    console.log(oneYearData.length)\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AAEzD,OAAO,SAASC,oBAAoBA,CAAA,EAAE;EAElC,MAAMC,SAAS,GAAGJ,WAAW;EAC7B,MAAMK,WAAW,GAAG,EAAE;EAEtBD,SAAS,CAACE,IAAI,CAAC,UAASC,CAAC,EAAEC,CAAC,EAAE;IAC1B;IACA,IAAID,CAAC,CAACE,IAAI,CAACC,IAAI,GAAGF,CAAC,CAACC,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC;IACvC,IAAIH,CAAC,CAACE,IAAI,CAACC,IAAI,GAAGF,CAAC,CAACC,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,IAAIH,CAAC,CAACE,IAAI,CAACE,KAAK,GAAGH,CAAC,CAACC,IAAI,CAACE,KAAK,EAAE,OAAO,CAAC;IACzC,IAAIJ,CAAC,CAACE,IAAI,CAACE,KAAK,GAAGH,CAAC,CAACC,IAAI,CAACE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1C,IAAIC,QAAQ,CAACL,CAAC,CAACE,IAAI,CAACI,GAAG,CAAC,GAAGD,QAAQ,CAACJ,CAAC,CAACC,IAAI,CAACI,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;IAC1D,IAAID,QAAQ,CAACL,CAAC,CAACE,IAAI,CAACI,GAAG,CAAC,GAAGD,QAAQ,CAACJ,CAAC,CAACC,IAAI,CAACI,GAAG,CAAC,EAAE,OAAO,CAAC;IACzD,OAAO,CAAC;EACV,CAAC,CAAC;EAEJ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,SAAS,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;IAEvC,IAAIF,QAAQ,CAACZ,WAAW,CAACc,CAAC,CAAC,CAACL,IAAI,CAACC,IAAI,CAAC,GAAGE,QAAQ,CAAC,IAAII,IAAI,EAAE,CAACC,WAAW,EAAE,CAAC,IACvEL,QAAQ,CAACZ,WAAW,CAACc,CAAC,CAAC,CAACL,IAAI,CAACE,KAAK,CAAC,IAAIC,QAAQ,CAAC,IAAII,IAAI,EAAE,CAACE,QAAQ,EAAE,GAAG,CAAC,CAAC,EAAE;IAEhFb,WAAW,CAACc,IAAI,CAACnB,WAAW,CAACc,CAAC,CAAC,CAAC;EACpC;EACAM,OAAO,CAACC,GAAG,CAAChB,WAAW,CAACU,MAAM,CAAC;AACnC;AAACO,EAAA,GAxBenB,oBAAoB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}